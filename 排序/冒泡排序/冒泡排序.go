package main

import "fmt"

/**
冒泡排序
原理：比较两个相邻的元素，将值大的元素交换到右边
思路：冒泡排序，类似于水中冒泡，较大的数沉下去，较小的数慢慢冒起来，假设从小到大，即为较大的数慢慢往后排，较小的数慢慢往前排，每一趟遍历，将一个最大的数移到序列末尾。
描述：
1.比较相邻的元素，如果前一个比后一个大，交换之。
2.第一趟排序第1个和第2个一对，比较与交换，随后第2个和第3个一对比较交换，这样直到倒数第2个和最后1个，将最大的数移动到最后一位。
3.第二趟将第二大的数移动至倒数第二位
......
因此需要n-1趟，n-1趟跑完所有的数都进行了比较排序也就完成了冒泡排序
*/

func main() {
	array := [6]int{66, 38, 25, 57, 45, 88}
	bubbleSort(&array) //传入数组的地址
	fmt.Println(array) //因为传入的是数组的内存地址，排序完成原数组也就完成了排序
}
func bubbleSort(array *[6]int) {
	temp := 0
	for i := 0; i < len(*array)-1; i++ {
		for j := 0; j < len(*array)-1-i; j++ {
			if (*array)[j] > (*array)[j+1] {
				temp = (*array)[j]
				(*array)[j] = (*array)[j+1]
				(*array)[j+1] = temp
			}
		}
	}
}
